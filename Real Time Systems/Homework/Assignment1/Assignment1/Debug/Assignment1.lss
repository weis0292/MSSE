
Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000606  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080012a  0080012a  000006c4  2**0
                  ALLOC
  3 .stab         00001b18  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003013  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000051ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  0000521f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000043c  00000000  00000000  0000524f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000212  00000000  00000000  0000568b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003e5  00000000  00000000  0000589d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00005c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000024c  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000026e  00000000  00000000  00005f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00006182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  c6:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_digital_output>:
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	58 f4       	brcc	.+22     	; 0xe8 <set_digital_output+0x1a>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <set_digital_output+0xa>
  d6:	99 0f       	add	r25, r25
  d8:	8a 95       	dec	r24
  da:	ea f7       	brpl	.-6      	; 0xd6 <set_digital_output+0x8>
  dc:	89 2f       	mov	r24, r25

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
  de:	aa e2       	ldi	r26, 0x2A	; 42
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	60 f4       	brcc	.+24     	; 0x104 <set_digital_output+0x36>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
  ec:	98 ef       	ldi	r25, 0xF8	; 248
  ee:	98 0f       	add	r25, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <set_digital_output+0x28>
  f4:	88 0f       	add	r24, r24
  f6:	9a 95       	dec	r25
  f8:	ea f7       	brpl	.-6      	; 0xf4 <set_digital_output+0x26>
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
  fa:	a4 e2       	ldi	r26, 0x24	; 36
  fc:	b0 e0       	ldi	r27, 0x00	; 0

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
  fe:	e5 e2       	ldi	r30, 0x25	; 37
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	23 c0       	rjmp	.+70     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	60 f4       	brcc	.+24     	; 0x120 <set_digital_output+0x52>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
 108:	90 ef       	ldi	r25, 0xF0	; 240
 10a:	98 0f       	add	r25, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <set_digital_output+0x44>
 110:	88 0f       	add	r24, r24
 112:	9a 95       	dec	r25
 114:	ea f7       	brpl	.-6      	; 0x110 <set_digital_output+0x42>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
 116:	a7 e2       	ldi	r26, 0x27	; 39
 118:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
 11a:	e8 e2       	ldi	r30, 0x28	; 40
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	15 c0       	rjmp	.+42     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	70 f4       	brcc	.+28     	; 0x140 <set_digital_output+0x72>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
 124:	2f e1       	ldi	r18, 0x1F	; 31
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	28 1b       	sub	r18, r24
 12a:	31 09       	sbc	r19, r1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <set_digital_output+0x64>
 130:	88 0f       	add	r24, r24
 132:	2a 95       	dec	r18
 134:	ea f7       	brpl	.-6      	; 0x130 <set_digital_output+0x62>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
 136:	a1 e2       	ldi	r26, 0x21	; 33
 138:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
 13a:	e2 e2       	ldi	r30, 0x22	; 34
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <set_digital_output+0x7c>
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
// with the specified pin (DDR, PORT, and PIN) along with a bitmask with a
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f0 e0       	ldi	r31, 0x00	; 0
// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
 14a:	6f 3f       	cpi	r22, 0xFF	; 255
 14c:	19 f4       	brne	.+6      	; 0x154 <set_digital_output+0x86>
		*(ioPin->portRegister) ^= ioPin->bitmask;
 14e:	90 81       	ld	r25, Z
 150:	98 27       	eor	r25, r24
 152:	09 c0       	rjmp	.+18     	; 0x166 <set_digital_output+0x98>
	else if (val)
 154:	66 23       	and	r22, r22
 156:	19 f0       	breq	.+6      	; 0x15e <set_digital_output+0x90>
		*(ioPin->portRegister) |= ioPin->bitmask;
 158:	90 81       	ld	r25, Z
 15a:	98 2b       	or	r25, r24
 15c:	04 c0       	rjmp	.+8      	; 0x166 <set_digital_output+0x98>
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
 15e:	20 81       	ld	r18, Z
 160:	98 2f       	mov	r25, r24
 162:	90 95       	com	r25
 164:	92 23       	and	r25, r18
 166:	90 83       	st	Z, r25
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
 168:	9c 91       	ld	r25, X
 16a:	98 2b       	or	r25, r24
 16c:	9c 93       	st	X, r25
 16e:	08 95       	ret

00000170 <main>:

#include <pololu/orangutan.h>

int main()
{
	clear();
 170:	0e 94 06 02 	call	0x40c	; 0x40c <clear>

	while(1)
	{
		unsigned char button = wait_for_button_press(ANY_BUTTON);
 174:	8c e2       	ldi	r24, 0x2C	; 44
 176:	0e 94 5f 02 	call	0x4be	; 0x4be <wait_for_button_press>
 17a:	c8 2f       	mov	r28, r24
		
		if(button == TOP_BUTTON)
 17c:	80 32       	cpi	r24, 0x20	; 32
 17e:	39 f4       	brne	.+14     	; 0x18e <main+0x1e>
		{
			print("Top Button");
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 1d 02 	call	0x43a	; 0x43a <print>
	#endif
}
	
static inline void green_led(unsigned char on)
{
	set_digital_output(GREEN_LED, on);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	84 e1       	ldi	r24, 0x14	; 20
 18c:	13 c0       	rjmp	.+38     	; 0x1b4 <main+0x44>
			green_led(HIGH);
		}
		else if(button == MIDDLE_BUTTON)
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	49 f4       	brne	.+18     	; 0x1a4 <main+0x34>
		{
			print("Middle Button");
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 1d 02 	call	0x43a	; 0x43a <print>
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	84 e1       	ldi	r24, 0x14	; 20
 19e:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <main+0x40>
			green_led(HIGH);
			red_led(HIGH);
		}
		else if(button == BOTTOM_BUTTON)
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <main+0x48>
		{
			print("Button Button");
 1a8:	8b e1       	ldi	r24, 0x1B	; 27
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 1d 02 	call	0x43a	; 0x43a <print>
	if (on == TOGGLE)
		set_digital_output(RED_LED, TOGGLE);
	else if (on == LOW)
		set_digital_output(RED_LED, HIGH);
	else
		set_digital_output(RED_LED, LOW);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
			red_led(HIGH);
		}
		
		wait_for_button_release(button);
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 74 02 	call	0x4e8	; 0x4e8 <wait_for_button_release>
	#endif
}
	
static inline void green_led(unsigned char on)
{
	set_digital_output(GREEN_LED, on);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	84 e1       	ldi	r24, 0x14	; 20
 1c2:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
{
	#if defined (_ORANGUTAN_SVP)	// red LED turns on when driven low
	if (on == TOGGLE)
		set_digital_output(RED_LED, TOGGLE);
	else if (on == LOW)
		set_digital_output(RED_LED, HIGH);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
 1ce:	d0 cf       	rjmp	.-96     	; 0x170 <main>

000001d0 <delayMicroseconds.clone.0>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	6f 93       	push	r22
 1d6:	64 e0       	ldi	r22, 0x04	; 4
 1d8:	6a 95       	dec	r22
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <delayMicroseconds.clone.0+0x8>
 1dc:	6f 91       	pop	r22
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <delayMicroseconds.clone.0+0x4>
 1e2:	08 95       	ret

000001e4 <_ZN12OrangutanLCD8busyWaitEv>:
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	17 b1       	in	r17, 0x07	; 7
 1ee:	3d 98       	cbi	0x07, 5	; 7
 1f0:	28 98       	cbi	0x05, 0	; 5
 1f2:	29 9a       	sbi	0x05, 1	; 5
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 1fc:	2a 9a       	sbi	0x05, 2	; 5
 1fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 202:	06 b1       	in	r16, 0x06	; 6
 204:	2a 98       	cbi	0x05, 2	; 5
 206:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 20a:	2a 9a       	sbi	0x05, 2	; 5
 20c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 210:	2a 98       	cbi	0x05, 2	; 5
 212:	24 96       	adiw	r28, 0x04	; 4
 214:	05 ff       	sbrs	r16, 5
 216:	10 c0       	rjmp	.+32     	; 0x238 <_ZN12OrangutanLCD8busyWaitEv+0x54>
 218:	9e 01       	movw	r18, r28
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	80 91 2e 01 	lds	r24, 0x012E
 222:	90 91 2f 01 	lds	r25, 0x012F
 226:	a0 91 30 01 	lds	r26, 0x0130
 22a:	b0 91 31 01 	lds	r27, 0x0131
 22e:	28 17       	cp	r18, r24
 230:	39 07       	cpc	r19, r25
 232:	4a 07       	cpc	r20, r26
 234:	5b 07       	cpc	r21, r27
 236:	00 f3       	brcs	.-64     	; 0x1f8 <_ZN12OrangutanLCD8busyWaitEv+0x14>
 238:	9e 01       	movw	r18, r28
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	80 91 2e 01 	lds	r24, 0x012E
 242:	90 91 2f 01 	lds	r25, 0x012F
 246:	a0 91 30 01 	lds	r26, 0x0130
 24a:	b0 91 31 01 	lds	r27, 0x0131
 24e:	28 17       	cp	r18, r24
 250:	39 07       	cpc	r19, r25
 252:	4a 07       	cpc	r20, r26
 254:	5b 07       	cpc	r21, r27
 256:	28 f0       	brcs	.+10     	; 0x262 <_ZN12OrangutanLCD8busyWaitEv+0x7e>
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a0 e0       	ldi	r26, 0x00	; 0
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	04 c0       	rjmp	.+8      	; 0x26a <_ZN12OrangutanLCD8busyWaitEv+0x86>
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	95 e7       	ldi	r25, 0x75	; 117
 266:	a0 e0       	ldi	r26, 0x00	; 0
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	80 93 2e 01 	sts	0x012E, r24
 26e:	90 93 2f 01 	sts	0x012F, r25
 272:	a0 93 30 01 	sts	0x0130, r26
 276:	b0 93 31 01 	sts	0x0131, r27
 27a:	17 b9       	out	0x07, r17	; 7
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <_ZN12OrangutanLCD8sendDataEh>:
 286:	28 b1       	in	r18, 0x08	; 8
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	90 70       	andi	r25, 0x00	; 0
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	23 7c       	andi	r18, 0xC3	; 195
 298:	28 2b       	or	r18, r24
 29a:	28 b9       	out	0x08, r18	; 8
 29c:	2a 9a       	sbi	0x05, 2	; 5
 29e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 2a2:	2a 98       	cbi	0x05, 2	; 5
 2a4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <delayMicroseconds.clone.0>
 2a8:	08 95       	ret

000002aa <_ZN12OrangutanLCD4sendEhhh>:
 2aa:	a2 e0       	ldi	r26, 0x02	; 2
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	eb e5       	ldi	r30, 0x5B	; 91
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__prologue_saves__+0x1a>
 2b6:	18 2f       	mov	r17, r24
 2b8:	4a 83       	std	Y+2, r20	; 0x02
 2ba:	69 83       	std	Y+1, r22	; 0x01
 2bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN12OrangutanLCD4initEv>
 2c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN12OrangutanLCD8busyWaitEv>
 2c4:	f7 b0       	in	r15, 0x07	; 7
 2c6:	08 b1       	in	r16, 0x08	; 8
 2c8:	29 98       	cbi	0x05, 1	; 5
 2ca:	69 81       	ldd	r22, Y+1	; 0x01
 2cc:	4a 81       	ldd	r20, Y+2	; 0x02
 2ce:	66 23       	and	r22, r22
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <_ZN12OrangutanLCD4sendEhhh+0x2c>
 2d2:	28 9a       	sbi	0x05, 0	; 5
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <_ZN12OrangutanLCD4sendEhhh+0x2e>
 2d6:	28 98       	cbi	0x05, 0	; 5
 2d8:	87 b1       	in	r24, 0x07	; 7
 2da:	8c 63       	ori	r24, 0x3C	; 60
 2dc:	87 b9       	out	0x07, r24	; 7
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	29 f0       	breq	.+10     	; 0x2ec <_ZN12OrangutanLCD4sendEhhh+0x42>
 2e2:	81 2f       	mov	r24, r17
 2e4:	82 95       	swap	r24
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	0e 94 43 01 	call	0x286	; 0x286 <_ZN12OrangutanLCD8sendDataEh>
 2ec:	81 2f       	mov	r24, r17
 2ee:	8f 70       	andi	r24, 0x0F	; 15
 2f0:	0e 94 43 01 	call	0x286	; 0x286 <_ZN12OrangutanLCD8sendDataEh>
 2f4:	f7 b8       	out	0x07, r15	; 7
 2f6:	08 b9       	out	0x08, r16	; 8
 2f8:	22 96       	adiw	r28, 0x02	; 2
 2fa:	e5 e0       	ldi	r30, 0x05	; 5
 2fc:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__epilogue_restores__+0x1a>

00000300 <_ZN12OrangutanLCD8send_cmdEh>:
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	42 e0       	ldi	r20, 0x02	; 2
 304:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN12OrangutanLCD4sendEhhh>
 308:	08 95       	ret

0000030a <_ZN12OrangutanLCD9send_dataEh>:
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	42 e0       	ldi	r20, 0x02	; 2
 30e:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN12OrangutanLCD4sendEhhh>
 312:	08 95       	ret

00000314 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN12OrangutanLCD4sendEhhh>
 31c:	08 95       	ret

0000031e <_ZN12OrangutanLCD5init2Ev>:
 31e:	3d 98       	cbi	0x07, 5	; 7
 320:	45 9a       	sbi	0x08, 5	; 8
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	95 e7       	ldi	r25, 0x75	; 117
 326:	a0 e0       	ldi	r26, 0x00	; 0
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	80 93 2e 01 	sts	0x012E, r24
 32e:	90 93 2f 01 	sts	0x012F, r25
 332:	a0 93 30 01 	sts	0x0130, r26
 336:	b0 93 31 01 	sts	0x0131, r27
 33a:	20 9a       	sbi	0x04, 0	; 4
 33c:	21 9a       	sbi	0x04, 1	; 4
 33e:	22 9a       	sbi	0x04, 2	; 4
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN12OrangutanLCD13send_4bit_cmdEh>
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 39e:	08 95       	ret

000003a0 <_ZN12OrangutanLCD4initEv>:
 3a0:	80 91 32 01 	lds	r24, 0x0132
 3a4:	88 23       	and	r24, r24
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <_ZN12OrangutanLCD4initEv+0x12>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 32 01 	sts	0x0132, r24
 3ae:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN12OrangutanLCD5init2Ev>
 3b2:	08 95       	ret

000003b4 <_ZN12OrangutanLCD5clearEv>:
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 80 01 	call	0x300	; 0x300 <_ZN12OrangutanLCD8send_cmdEh>
 3ba:	80 91 2a 01 	lds	r24, 0x012A
 3be:	90 91 2b 01 	lds	r25, 0x012B
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	11 f1       	breq	.+68     	; 0x40a <_ZN12OrangutanLCD5clearEv+0x56>
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e2       	ldi	r27, 0x20	; 32
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <_ZN12OrangutanLCD5clearEv+0x28>
 3cc:	e0 91 2a 01 	lds	r30, 0x012A
 3d0:	f0 91 2b 01 	lds	r31, 0x012B
 3d4:	e2 0f       	add	r30, r18
 3d6:	f3 1f       	adc	r31, r19
 3d8:	b0 83       	st	Z, r27
 3da:	af 5f       	subi	r26, 0xFF	; 255
 3dc:	2a 2f       	mov	r18, r26
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	80 91 00 01 	lds	r24, 0x0100
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	60 91 01 01 	lds	r22, 0x0101
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	86 9f       	mul	r24, r22
 3f0:	a0 01       	movw	r20, r0
 3f2:	87 9f       	mul	r24, r23
 3f4:	50 0d       	add	r21, r0
 3f6:	96 9f       	mul	r25, r22
 3f8:	50 0d       	add	r21, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	24 17       	cp	r18, r20
 3fe:	35 07       	cpc	r19, r21
 400:	2c f3       	brlt	.-54     	; 0x3cc <_ZN12OrangutanLCD5clearEv+0x18>
 402:	10 92 2d 01 	sts	0x012D, r1
 406:	10 92 2c 01 	sts	0x012C, r1
 40a:	08 95       	ret

0000040c <clear>:
 40c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN12OrangutanLCD5clearEv>
 410:	08 95       	ret

00000412 <_ZN12OrangutanLCD5printEPKc>:
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	e8 2e       	mov	r14, r24
 41c:	e7 01       	movw	r28, r14
 41e:	7e 01       	movw	r14, r28
 420:	f9 2e       	mov	r15, r25
 422:	e7 01       	movw	r28, r14
 424:	02 c0       	rjmp	.+4      	; 0x42a <_ZN12OrangutanLCD5printEPKc+0x18>
 426:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN12OrangutanLCD9send_dataEh>
 42a:	89 91       	ld	r24, Y+
 42c:	88 23       	and	r24, r24
 42e:	d9 f7       	brne	.-10     	; 0x426 <_ZN12OrangutanLCD5printEPKc+0x14>
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	08 95       	ret

0000043a <print>:
 43a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN12OrangutanLCD5printEPKc>
 43e:	08 95       	ret

00000440 <_ZN20OrangutanPushbuttons5init2Ev>:
 440:	87 b1       	in	r24, 0x07	; 7
 442:	83 7d       	andi	r24, 0xD3	; 211
 444:	87 b9       	out	0x07, r24	; 7
 446:	88 b1       	in	r24, 0x08	; 8
 448:	8c 62       	ori	r24, 0x2C	; 44
 44a:	88 b9       	out	0x08, r24	; 8
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	6f 93       	push	r22
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	6a 95       	dec	r22
 456:	f1 f7       	brne	.-4      	; 0x454 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
 458:	6f 91       	pop	r22
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	c9 f7       	brne	.-14     	; 0x450 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
 45e:	08 95       	ret

00000460 <_ZN20OrangutanPushbuttons4initEv>:
 460:	80 91 33 01 	lds	r24, 0x0133
 464:	88 23       	and	r24, r24
 466:	29 f4       	brne	.+10     	; 0x472 <_ZN20OrangutanPushbuttons4initEv+0x12>
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 33 01 	sts	0x0133, r24
 46e:	0e 94 20 02 	call	0x440	; 0x440 <_ZN20OrangutanPushbuttons5init2Ev>
 472:	08 95       	ret

00000474 <_ZN20OrangutanPushbuttons12waitForPressEh>:
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	18 2f       	mov	r17, r24
 47c:	0e 94 30 02 	call	0x460	; 0x460 <_ZN20OrangutanPushbuttons4initEv>
 480:	c1 2f       	mov	r28, r17
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	26 b1       	in	r18, 0x06	; 6
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	20 95       	com	r18
 48a:	30 95       	com	r19
 48c:	2c 23       	and	r18, r28
 48e:	3d 23       	and	r19, r29
 490:	21 15       	cp	r18, r1
 492:	31 05       	cpc	r19, r1
 494:	b9 f3       	breq	.-18     	; 0x484 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
 496:	8a e0       	ldi	r24, 0x0A	; 10
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 49e:	26 b1       	in	r18, 0x06	; 6
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	20 95       	com	r18
 4a4:	30 95       	com	r19
 4a6:	2c 23       	and	r18, r28
 4a8:	3d 23       	and	r19, r29
 4aa:	21 15       	cp	r18, r1
 4ac:	31 05       	cpc	r19, r1
 4ae:	51 f3       	breq	.-44     	; 0x484 <_ZN20OrangutanPushbuttons12waitForPressEh+0x10>
 4b0:	86 b1       	in	r24, 0x06	; 6
 4b2:	80 95       	com	r24
 4b4:	81 23       	and	r24, r17
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	08 95       	ret

000004be <wait_for_button_press>:
 4be:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN20OrangutanPushbuttons12waitForPressEh>
 4c2:	08 95       	ret

000004c4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
 4c4:	1f 93       	push	r17
 4c6:	18 2f       	mov	r17, r24
 4c8:	0e 94 30 02 	call	0x460	; 0x460 <_ZN20OrangutanPushbuttons4initEv>
 4cc:	86 b1       	in	r24, 0x06	; 6
 4ce:	81 23       	and	r24, r17
 4d0:	e9 f3       	breq	.-6      	; 0x4cc <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
 4d2:	8a e0       	ldi	r24, 0x0A	; 10
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 c7 02 	call	0x58e	; 0x58e <delay_ms>
 4da:	86 b1       	in	r24, 0x06	; 6
 4dc:	81 23       	and	r24, r17
 4de:	b1 f3       	breq	.-20     	; 0x4cc <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
 4e0:	86 b1       	in	r24, 0x06	; 6
 4e2:	81 23       	and	r24, r17
 4e4:	1f 91       	pop	r17
 4e6:	08 95       	ret

000004e8 <wait_for_button_release>:
 4e8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
 4ec:	08 95       	ret

000004ee <_ZN13OrangutanTime17delayMicrosecondsEj>:
 4ee:	6f 93       	push	r22
 4f0:	64 e0       	ldi	r22, 0x04	; 4
 4f2:	6a 95       	dec	r22
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
 4f6:	6f 91       	pop	r22
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <_ZN13OrangutanTime17delayMicrosecondsEj>
 4fc:	08 95       	ret

000004fe <__vector_11>:
 4fe:	2f 92       	push	r2
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	2f b6       	in	r2, 0x3f	; 63
 506:	80 91 41 01 	lds	r24, 0x0141
 50a:	90 91 42 01 	lds	r25, 0x0142
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	80 93 41 01 	sts	0x0141, r24
 514:	90 93 42 01 	sts	0x0142, r25
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	80 91 43 01 	lds	r24, 0x0143
 51e:	89 1f       	adc	r24, r25
 520:	80 93 43 01 	sts	0x0143, r24
 524:	90 91 49 01 	lds	r25, 0x0149
 528:	9c 5f       	subi	r25, 0xFC	; 252
 52a:	90 93 49 01 	sts	0x0149, r25
 52e:	80 91 48 01 	lds	r24, 0x0148
 532:	80 51       	subi	r24, 0x10	; 16
 534:	97 42       	sbci	r25, 0x27	; 39
 536:	c0 f0       	brcs	.+48     	; 0x568 <end>
 538:	90 93 49 01 	sts	0x0149, r25
 53c:	80 93 48 01 	sts	0x0148, r24
 540:	80 91 44 01 	lds	r24, 0x0144
 544:	90 91 45 01 	lds	r25, 0x0145
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	80 93 44 01 	sts	0x0144, r24
 54e:	90 93 45 01 	sts	0x0145, r25
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	80 91 46 01 	lds	r24, 0x0146
 558:	89 1f       	adc	r24, r25
 55a:	80 93 46 01 	sts	0x0146, r24
 55e:	80 91 47 01 	lds	r24, 0x0147
 562:	89 1f       	adc	r24, r25
 564:	80 93 47 01 	sts	0x0147, r24

00000568 <end>:
 568:	2f be       	out	0x3f, r2	; 63
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	2f 90       	pop	r2
 570:	18 95       	reti

00000572 <_ZN13OrangutanTime17delayMillisecondsEj>:
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
 578:	05 c0       	rjmp	.+10     	; 0x584 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
 57a:	88 ee       	ldi	r24, 0xE8	; 232
 57c:	93 e0       	ldi	r25, 0x03	; 3
 57e:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN13OrangutanTime17delayMicrosecondsEj>
 582:	21 97       	sbiw	r28, 0x01	; 1
 584:	20 97       	sbiw	r28, 0x00	; 0
 586:	c9 f7       	brne	.-14     	; 0x57a <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <delay_ms>:
 58e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN13OrangutanTime17delayMillisecondsEj>
 592:	08 95       	ret

00000594 <__prologue_saves__>:
 594:	2f 92       	push	r2
 596:	3f 92       	push	r3
 598:	4f 92       	push	r4
 59a:	5f 92       	push	r5
 59c:	6f 92       	push	r6
 59e:	7f 92       	push	r7
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	ca 1b       	sub	r28, r26
 5be:	db 0b       	sbc	r29, r27
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	09 94       	ijmp

000005cc <__epilogue_restores__>:
 5cc:	2a 88       	ldd	r2, Y+18	; 0x12
 5ce:	39 88       	ldd	r3, Y+17	; 0x11
 5d0:	48 88       	ldd	r4, Y+16	; 0x10
 5d2:	5f 84       	ldd	r5, Y+15	; 0x0f
 5d4:	6e 84       	ldd	r6, Y+14	; 0x0e
 5d6:	7d 84       	ldd	r7, Y+13	; 0x0d
 5d8:	8c 84       	ldd	r8, Y+12	; 0x0c
 5da:	9b 84       	ldd	r9, Y+11	; 0x0b
 5dc:	aa 84       	ldd	r10, Y+10	; 0x0a
 5de:	b9 84       	ldd	r11, Y+9	; 0x09
 5e0:	c8 84       	ldd	r12, Y+8	; 0x08
 5e2:	df 80       	ldd	r13, Y+7	; 0x07
 5e4:	ee 80       	ldd	r14, Y+6	; 0x06
 5e6:	fd 80       	ldd	r15, Y+5	; 0x05
 5e8:	0c 81       	ldd	r16, Y+4	; 0x04
 5ea:	1b 81       	ldd	r17, Y+3	; 0x03
 5ec:	aa 81       	ldd	r26, Y+2	; 0x02
 5ee:	b9 81       	ldd	r27, Y+1	; 0x01
 5f0:	ce 0f       	add	r28, r30
 5f2:	d1 1d       	adc	r29, r1
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
 5fe:	ed 01       	movw	r28, r26
 600:	08 95       	ret

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
