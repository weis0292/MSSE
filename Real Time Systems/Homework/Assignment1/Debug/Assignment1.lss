
Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800100  00800100  000004ee  2**0
                  ALLOC
  2 .stab         00000be8  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000019d6  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00002aae  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000042a  00000000  00000000  00002b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000230  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000286  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bb  00000000  00000000  0000382e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  c6:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_digital_output>:
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	58 f4       	brcc	.+22     	; 0xe8 <set_digital_output+0x1a>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <set_digital_output+0xa>
  d6:	99 0f       	add	r25, r25
  d8:	8a 95       	dec	r24
  da:	ea f7       	brpl	.-6      	; 0xd6 <set_digital_output+0x8>
  dc:	89 2f       	mov	r24, r25

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
  de:	aa e2       	ldi	r26, 0x2A	; 42
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	60 f4       	brcc	.+24     	; 0x104 <set_digital_output+0x36>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
  ec:	98 ef       	ldi	r25, 0xF8	; 248
  ee:	98 0f       	add	r25, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <set_digital_output+0x28>
  f4:	88 0f       	add	r24, r24
  f6:	9a 95       	dec	r25
  f8:	ea f7       	brpl	.-6      	; 0xf4 <set_digital_output+0x26>
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
  fa:	a4 e2       	ldi	r26, 0x24	; 36
  fc:	b0 e0       	ldi	r27, 0x00	; 0

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
  fe:	e5 e2       	ldi	r30, 0x25	; 37
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	23 c0       	rjmp	.+70     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	60 f4       	brcc	.+24     	; 0x120 <set_digital_output+0x52>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
 108:	90 ef       	ldi	r25, 0xF0	; 240
 10a:	98 0f       	add	r25, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <set_digital_output+0x44>
 110:	88 0f       	add	r24, r24
 112:	9a 95       	dec	r25
 114:	ea f7       	brpl	.-6      	; 0x110 <set_digital_output+0x42>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
 116:	a7 e2       	ldi	r26, 0x27	; 39
 118:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
 11a:	e8 e2       	ldi	r30, 0x28	; 40
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	15 c0       	rjmp	.+42     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	70 f4       	brcc	.+28     	; 0x140 <set_digital_output+0x72>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
 124:	2f e1       	ldi	r18, 0x1F	; 31
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	28 1b       	sub	r18, r24
 12a:	31 09       	sbc	r19, r1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <set_digital_output+0x64>
 130:	88 0f       	add	r24, r24
 132:	2a 95       	dec	r18
 134:	ea f7       	brpl	.-6      	; 0x130 <set_digital_output+0x62>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
 136:	a1 e2       	ldi	r26, 0x21	; 33
 138:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
 13a:	e2 e2       	ldi	r30, 0x22	; 34
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <set_digital_output+0x7c>
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
// with the specified pin (DDR, PORT, and PIN) along with a bitmask with a
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f0 e0       	ldi	r31, 0x00	; 0
// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
 14a:	6f 3f       	cpi	r22, 0xFF	; 255
 14c:	19 f4       	brne	.+6      	; 0x154 <set_digital_output+0x86>
		*(ioPin->portRegister) ^= ioPin->bitmask;
 14e:	90 81       	ld	r25, Z
 150:	98 27       	eor	r25, r24
 152:	09 c0       	rjmp	.+18     	; 0x166 <set_digital_output+0x98>
	else if (val)
 154:	66 23       	and	r22, r22
 156:	19 f0       	breq	.+6      	; 0x15e <set_digital_output+0x90>
		*(ioPin->portRegister) |= ioPin->bitmask;
 158:	90 81       	ld	r25, Z
 15a:	98 2b       	or	r25, r24
 15c:	04 c0       	rjmp	.+8      	; 0x166 <set_digital_output+0x98>
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
 15e:	20 81       	ld	r18, Z
 160:	98 2f       	mov	r25, r24
 162:	90 95       	com	r25
 164:	92 23       	and	r25, r18
 166:	90 83       	st	Z, r25
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
 168:	9c 91       	ld	r25, X
 16a:	98 2b       	or	r25, r24
 16c:	9c 93       	st	X, r25
 16e:	08 95       	ret

00000170 <main>:

int main()
{
	const long blink_ms = 250;
	unsigned long ticks_top = 0;
	unsigned long ticks_bottom = 0;
 170:	c1 2c       	mov	r12, r1
 172:	d1 2c       	mov	r13, r1
 174:	76 01       	movw	r14, r12
#include <pololu/orangutan.h>

int main()
{
	const long blink_ms = 250;
	unsigned long ticks_top = 0;
 176:	81 2c       	mov	r8, r1
 178:	91 2c       	mov	r9, r1
 17a:	54 01       	movw	r10, r8
	unsigned long ticks_bottom = 0;

	while(1)
	{
		unsigned char pressed_state = button_is_pressed(ANY_BUTTON);
 17c:	8c e2       	ldi	r24, 0x2C	; 44
 17e:	0e 94 37 01 	call	0x26e	; 0x26e <button_is_pressed>
		// The middle button will count as both the top and the bottom button (fun!)
		unsigned char pressed_state_top = pressed_state & (TOP_BUTTON | MIDDLE_BUTTON);
		unsigned char pressed_state_bottom = pressed_state & (BOTTOM_BUTTON | MIDDLE_BUTTON);
 182:	c8 2f       	mov	r28, r24
 184:	cc 70       	andi	r28, 0x0C	; 12

	while(1)
	{
		unsigned char pressed_state = button_is_pressed(ANY_BUTTON);
		// The middle button will count as both the top and the bottom button (fun!)
		unsigned char pressed_state_top = pressed_state & (TOP_BUTTON | MIDDLE_BUTTON);
 186:	88 72       	andi	r24, 0x28	; 40
		unsigned char pressed_state_bottom = pressed_state & (BOTTOM_BUTTON | MIDDLE_BUTTON);

		// Deal with the top button and the green LED
		if(pressed_state_top)
 188:	d9 f0       	breq	.+54     	; 0x1c0 <main+0x50>
		{
			if(((ticks_to_microseconds(get_ticks() - ticks_top) / 1000) >= blink_ms) || (ticks_top == 0))
 18a:	0e 94 df 01 	call	0x3be	; 0x3be <get_ticks>
 18e:	68 19       	sub	r22, r8
 190:	79 09       	sbc	r23, r9
 192:	8a 09       	sbc	r24, r10
 194:	9b 09       	sbc	r25, r11
 196:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ticks_to_microseconds>
 19a:	60 39       	cpi	r22, 0x90	; 144
 19c:	70 4d       	sbci	r23, 0xD0	; 208
 19e:	83 40       	sbci	r24, 0x03	; 3
 1a0:	91 05       	cpc	r25, r1
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <main+0x3e>
 1a4:	81 14       	cp	r8, r1
 1a6:	91 04       	cpc	r9, r1
 1a8:	a1 04       	cpc	r10, r1
 1aa:	b1 04       	cpc	r11, r1
 1ac:	81 f4       	brne	.+32     	; 0x1ce <main+0x5e>
	#endif
}
	
static inline void green_led(unsigned char on)
{
	set_digital_output(GREEN_LED, on);
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
			{
				green_led(TOGGLE);
				ticks_top = get_ticks();
 1b6:	0e 94 df 01 	call	0x3be	; 0x3be <get_ticks>
 1ba:	4b 01       	movw	r8, r22
 1bc:	5c 01       	movw	r10, r24
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <main+0x5e>
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
			}
		}
		else
		{
			green_led(LOW);
			ticks_top = 0;
 1c8:	81 2c       	mov	r8, r1
 1ca:	91 2c       	mov	r9, r1
 1cc:	54 01       	movw	r10, r8
		}

		// Deal with the bottom button and the red LED
		if(pressed_state_bottom)
 1ce:	cc 23       	and	r28, r28
 1d0:	d9 f0       	breq	.+54     	; 0x208 <main+0x98>
		{
			if(((ticks_to_microseconds(get_ticks() - ticks_bottom) / 1000) >= blink_ms) || (ticks_bottom == 0))
 1d2:	0e 94 df 01 	call	0x3be	; 0x3be <get_ticks>
 1d6:	6c 19       	sub	r22, r12
 1d8:	7d 09       	sbc	r23, r13
 1da:	8e 09       	sbc	r24, r14
 1dc:	9f 09       	sbc	r25, r15
 1de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <ticks_to_microseconds>
 1e2:	60 39       	cpi	r22, 0x90	; 144
 1e4:	70 4d       	sbci	r23, 0xD0	; 208
 1e6:	83 40       	sbci	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	28 f4       	brcc	.+10     	; 0x1f6 <main+0x86>
 1ec:	c1 14       	cp	r12, r1
 1ee:	d1 04       	cpc	r13, r1
 1f0:	e1 04       	cpc	r14, r1
 1f2:	f1 04       	cpc	r15, r1
 1f4:	19 f6       	brne	.-122    	; 0x17c <main+0xc>
// high or low, depending on the argument.
static inline void red_led(unsigned char on)
{
	#if defined (_ORANGUTAN_SVP)	// red LED turns on when driven low
	if (on == TOGGLE)
		set_digital_output(RED_LED, TOGGLE);
 1f6:	6f ef       	ldi	r22, 0xFF	; 255
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
			{
				red_led(TOGGLE);
				ticks_bottom = get_ticks();
 1fe:	0e 94 df 01 	call	0x3be	; 0x3be <get_ticks>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
 206:	ba cf       	rjmp	.-140    	; 0x17c <main+0xc>
	else if (on == LOW)
		set_digital_output(RED_LED, HIGH);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 67 00 	call	0xce	; 0xce <set_digital_output>
			}
		}
		else
		{
			red_led(LOW);
			ticks_bottom = 0;
 210:	c1 2c       	mov	r12, r1
 212:	d1 2c       	mov	r13, r1
 214:	76 01       	movw	r14, r12
 216:	b2 cf       	rjmp	.-156    	; 0x17c <main+0xc>

00000218 <_ZN20OrangutanPushbuttons5init2Ev>:
 218:	87 b1       	in	r24, 0x07	; 7
 21a:	83 7d       	andi	r24, 0xD3	; 211
 21c:	87 b9       	out	0x07, r24	; 7
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	8c 62       	ori	r24, 0x2C	; 44
 222:	88 b9       	out	0x08, r24	; 8
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	6f 93       	push	r22
 22a:	64 e0       	ldi	r22, 0x04	; 4
 22c:	6a 95       	dec	r22
 22e:	f1 f7       	brne	.-4      	; 0x22c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
 230:	6f 91       	pop	r22
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	c9 f7       	brne	.-14     	; 0x228 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
 236:	08 95       	ret

00000238 <_ZN20OrangutanPushbuttons4initEv>:
 238:	80 91 00 01 	lds	r24, 0x0100
 23c:	88 23       	and	r24, r24
 23e:	29 f4       	brne	.+10     	; 0x24a <_ZN20OrangutanPushbuttons4initEv+0x12>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 00 01 	sts	0x0100, r24
 246:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN20OrangutanPushbuttons5init2Ev>
 24a:	08 95       	ret

0000024c <_ZN20OrangutanPushbuttons9isPressedEh>:
 24c:	a1 e0       	ldi	r26, 0x01	; 1
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	ec e2       	ldi	r30, 0x2C	; 44
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	0c 94 14 02 	jmp	0x428	; 0x428 <__prologue_saves__+0x20>
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN20OrangutanPushbuttons4initEv>
 25e:	96 b1       	in	r25, 0x06	; 6
 260:	90 95       	com	r25
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	89 23       	and	r24, r25
 266:	21 96       	adiw	r28, 0x01	; 1
 268:	e2 e0       	ldi	r30, 0x02	; 2
 26a:	0c 94 30 02 	jmp	0x460	; 0x460 <__epilogue_restores__+0x20>

0000026e <button_is_pressed>:
 26e:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN20OrangutanPushbuttons9isPressedEh>
 272:	08 95       	ret

00000274 <__vector_11>:
 274:	2f 92       	push	r2
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	2f b6       	in	r2, 0x3f	; 63
 27c:	80 91 0e 01 	lds	r24, 0x010E
 280:	90 91 0f 01 	lds	r25, 0x010F
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	80 93 0e 01 	sts	0x010E, r24
 28a:	90 93 0f 01 	sts	0x010F, r25
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 91 10 01 	lds	r24, 0x0110
 294:	89 1f       	adc	r24, r25
 296:	80 93 10 01 	sts	0x0110, r24
 29a:	90 91 16 01 	lds	r25, 0x0116
 29e:	9c 5f       	subi	r25, 0xFC	; 252
 2a0:	90 93 16 01 	sts	0x0116, r25
 2a4:	80 91 15 01 	lds	r24, 0x0115
 2a8:	80 51       	subi	r24, 0x10	; 16
 2aa:	97 42       	sbci	r25, 0x27	; 39
 2ac:	c0 f0       	brcs	.+48     	; 0x2de <end>
 2ae:	90 93 16 01 	sts	0x0116, r25
 2b2:	80 93 15 01 	sts	0x0115, r24
 2b6:	80 91 11 01 	lds	r24, 0x0111
 2ba:	90 91 12 01 	lds	r25, 0x0112
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	80 93 11 01 	sts	0x0111, r24
 2c4:	90 93 12 01 	sts	0x0112, r25
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	80 91 13 01 	lds	r24, 0x0113
 2ce:	89 1f       	adc	r24, r25
 2d0:	80 93 13 01 	sts	0x0113, r24
 2d4:	80 91 14 01 	lds	r24, 0x0114
 2d8:	89 1f       	adc	r24, r25
 2da:	80 93 14 01 	sts	0x0114, r24

000002de <end>:
 2de:	2f be       	out	0x3f, r2	; 63
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	2f 90       	pop	r2
 2e6:	18 95       	reti

000002e8 <ticks_to_microseconds>:
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	6f 5f       	subi	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	25 e0       	ldi	r18, 0x05	; 5
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__udivmodsi4>
 308:	b9 01       	movw	r22, r18
 30a:	ca 01       	movw	r24, r20
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <_ZN13OrangutanTime5init2Ev>:
 312:	e0 e7       	ldi	r30, 0x70	; 112
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	80 83       	st	Z, r24
 31c:	a0 eb       	ldi	r26, 0xB0	; 176
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	83 60       	ori	r24, 0x03	; 3
 324:	8c 93       	st	X, r24
 326:	a1 eb       	ldi	r26, 0xB1	; 177
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	8c 91       	ld	r24, X
 32c:	80 7f       	andi	r24, 0xF0	; 240
 32e:	8c 93       	st	X, r24
 330:	8c 91       	ld	r24, X
 332:	82 60       	ori	r24, 0x02	; 2
 334:	8c 93       	st	X, r24
 336:	b8 9a       	sbi	0x17, 0	; 23
 338:	80 81       	ld	r24, Z
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	80 83       	st	Z, r24
 33e:	78 94       	sei
 340:	08 95       	ret

00000342 <_ZN13OrangutanTime4initEv>:
 342:	80 91 17 01 	lds	r24, 0x0117
 346:	88 23       	and	r24, r24
 348:	29 f4       	brne	.+10     	; 0x354 <_ZN13OrangutanTime4initEv+0x12>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 17 01 	sts	0x0117, r24
 350:	0e 94 89 01 	call	0x312	; 0x312 <_ZN13OrangutanTime5init2Ev>
 354:	08 95       	ret

00000356 <_ZN13OrangutanTime5ticksEv>:
 356:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN13OrangutanTime4initEv>
 35a:	80 91 70 00 	lds	r24, 0x0070
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	80 93 70 00 	sts	0x0070, r24
 364:	20 91 b2 00 	lds	r18, 0x00B2
 368:	80 91 0d 01 	lds	r24, 0x010D
 36c:	90 91 0e 01 	lds	r25, 0x010E
 370:	a0 91 0f 01 	lds	r26, 0x010F
 374:	b0 91 10 01 	lds	r27, 0x0110
 378:	b8 99       	sbic	0x17, 0	; 23
 37a:	04 c0       	rjmp	.+8      	; 0x384 <_ZN13OrangutanTime5ticksEv+0x2e>
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <_ZN13OrangutanTime5ticksEv+0x50>
 384:	80 91 b2 00 	lds	r24, 0x00B2
 388:	20 91 0d 01 	lds	r18, 0x010D
 38c:	30 91 0e 01 	lds	r19, 0x010E
 390:	40 91 0f 01 	lds	r20, 0x010F
 394:	50 91 10 01 	lds	r21, 0x0110
 398:	20 50       	subi	r18, 0x00	; 0
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	4f 4f       	sbci	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a0 e0       	ldi	r26, 0x00	; 0
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	28 2b       	or	r18, r24
 3a8:	39 2b       	or	r19, r25
 3aa:	4a 2b       	or	r20, r26
 3ac:	5b 2b       	or	r21, r27
 3ae:	80 91 70 00 	lds	r24, 0x0070
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	80 93 70 00 	sts	0x0070, r24
 3b8:	b9 01       	movw	r22, r18
 3ba:	ca 01       	movw	r24, r20
 3bc:	08 95       	ret

000003be <get_ticks>:
 3be:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN13OrangutanTime5ticksEv>
 3c2:	08 95       	ret

000003c4 <__udivmodsi4>:
 3c4:	a1 e2       	ldi	r26, 0x21	; 33
 3c6:	1a 2e       	mov	r1, r26
 3c8:	aa 1b       	sub	r26, r26
 3ca:	bb 1b       	sub	r27, r27
 3cc:	fd 01       	movw	r30, r26
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <__udivmodsi4_ep>

000003d0 <__udivmodsi4_loop>:
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	ee 1f       	adc	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	a2 17       	cp	r26, r18
 3da:	b3 07       	cpc	r27, r19
 3dc:	e4 07       	cpc	r30, r20
 3de:	f5 07       	cpc	r31, r21
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__udivmodsi4_ep>
 3e2:	a2 1b       	sub	r26, r18
 3e4:	b3 0b       	sbc	r27, r19
 3e6:	e4 0b       	sbc	r30, r20
 3e8:	f5 0b       	sbc	r31, r21

000003ea <__udivmodsi4_ep>:
 3ea:	66 1f       	adc	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	88 1f       	adc	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	1a 94       	dec	r1
 3f4:	69 f7       	brne	.-38     	; 0x3d0 <__udivmodsi4_loop>
 3f6:	60 95       	com	r22
 3f8:	70 95       	com	r23
 3fa:	80 95       	com	r24
 3fc:	90 95       	com	r25
 3fe:	9b 01       	movw	r18, r22
 400:	ac 01       	movw	r20, r24
 402:	bd 01       	movw	r22, r26
 404:	cf 01       	movw	r24, r30
 406:	08 95       	ret

00000408 <__prologue_saves__>:
 408:	2f 92       	push	r2
 40a:	3f 92       	push	r3
 40c:	4f 92       	push	r4
 40e:	5f 92       	push	r5
 410:	6f 92       	push	r6
 412:	7f 92       	push	r7
 414:	8f 92       	push	r8
 416:	9f 92       	push	r9
 418:	af 92       	push	r10
 41a:	bf 92       	push	r11
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	ca 1b       	sub	r28, r26
 432:	db 0b       	sbc	r29, r27
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	09 94       	ijmp

00000440 <__epilogue_restores__>:
 440:	2a 88       	ldd	r2, Y+18	; 0x12
 442:	39 88       	ldd	r3, Y+17	; 0x11
 444:	48 88       	ldd	r4, Y+16	; 0x10
 446:	5f 84       	ldd	r5, Y+15	; 0x0f
 448:	6e 84       	ldd	r6, Y+14	; 0x0e
 44a:	7d 84       	ldd	r7, Y+13	; 0x0d
 44c:	8c 84       	ldd	r8, Y+12	; 0x0c
 44e:	9b 84       	ldd	r9, Y+11	; 0x0b
 450:	aa 84       	ldd	r10, Y+10	; 0x0a
 452:	b9 84       	ldd	r11, Y+9	; 0x09
 454:	c8 84       	ldd	r12, Y+8	; 0x08
 456:	df 80       	ldd	r13, Y+7	; 0x07
 458:	ee 80       	ldd	r14, Y+6	; 0x06
 45a:	fd 80       	ldd	r15, Y+5	; 0x05
 45c:	0c 81       	ldd	r16, Y+4	; 0x04
 45e:	1b 81       	ldd	r17, Y+3	; 0x03
 460:	aa 81       	ldd	r26, Y+2	; 0x02
 462:	b9 81       	ldd	r27, Y+1	; 0x01
 464:	ce 0f       	add	r28, r30
 466:	d1 1d       	adc	r29, r1
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	ed 01       	movw	r28, r26
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
