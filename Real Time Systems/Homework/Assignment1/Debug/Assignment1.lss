
Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000072e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800102  00800102  000007c4  2**0
                  ALLOC
  3 .stab         00001b0c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003013  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000052e3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00005313  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000520  00000000  00000000  0000535b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002d0  00000000  00000000  0000587b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000049b  00000000  00000000  00005b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ac  00000000  00000000  00005fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c0  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000049d  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000067f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  c6:	0c 94 95 03 	jmp	0x72a	; 0x72a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_digital_output>:
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	58 f4       	brcc	.+22     	; 0xe8 <set_digital_output+0x1a>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <set_digital_output+0xa>
  d6:	99 0f       	add	r25, r25
  d8:	8a 95       	dec	r24
  da:	ea f7       	brpl	.-6      	; 0xd6 <set_digital_output+0x8>
  dc:	89 2f       	mov	r24, r25

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
  de:	aa e2       	ldi	r26, 0x2A	; 42
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	60 f4       	brcc	.+24     	; 0x104 <set_digital_output+0x36>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
  ec:	98 ef       	ldi	r25, 0xF8	; 248
  ee:	98 0f       	add	r25, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <set_digital_output+0x28>
  f4:	88 0f       	add	r24, r24
  f6:	9a 95       	dec	r25
  f8:	ea f7       	brpl	.-6      	; 0xf4 <set_digital_output+0x26>
#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
  fa:	a4 e2       	ldi	r26, 0x24	; 36
  fc:	b0 e0       	ldi	r27, 0x00	; 0

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
  fe:	e5 e2       	ldi	r30, 0x25	; 37
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	23 c0       	rjmp	.+70     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	60 f4       	brcc	.+24     	; 0x120 <set_digital_output+0x52>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
 108:	90 ef       	ldi	r25, 0xF0	; 240
 10a:	98 0f       	add	r25, r24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <set_digital_output+0x44>
 110:	88 0f       	add	r24, r24
 112:	9a 95       	dec	r25
 114:	ea f7       	brpl	.-6      	; 0x110 <set_digital_output+0x42>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
 116:	a7 e2       	ldi	r26, 0x27	; 39
 118:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 8);
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
 11a:	e8 e2       	ldi	r30, 0x28	; 40
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	15 c0       	rjmp	.+42     	; 0x14a <set_digital_output+0x7c>
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	70 f4       	brcc	.+28     	; 0x140 <set_digital_output+0x72>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
 124:	2f e1       	ldi	r18, 0x1F	; 31
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	28 1b       	sub	r18, r24
 12a:	31 09       	sbc	r19, r1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	01 c0       	rjmp	.+2      	; 0x132 <set_digital_output+0x64>
 130:	88 0f       	add	r24, r24
 132:	2a 95       	dec	r18
 134:	ea f7       	brpl	.-6      	; 0x130 <set_digital_output+0x62>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
 136:	a1 e2       	ldi	r26, 0x21	; 33
 138:	b0 e0       	ldi	r27, 0x00	; 0
		io->bitmask = 1 << (pin - 16);
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
 13a:	e2 e2       	ldi	r30, 0x22	; 34
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <set_digital_output+0x7c>
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b0 e0       	ldi	r27, 0x00	; 0
// with the specified pin (DDR, PORT, and PIN) along with a bitmask with a
// 1 in the position of the specified pin and 0s everywhere else.
static inline void get_io_registers(struct IOStruct* io, unsigned char pin)
{
	io->pinRegister = 0;
	io->portRegister = 0;
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f0 e0       	ldi	r31, 0x00	; 0
// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
 14a:	6f 3f       	cpi	r22, 0xFF	; 255
 14c:	19 f4       	brne	.+6      	; 0x154 <set_digital_output+0x86>
		*(ioPin->portRegister) ^= ioPin->bitmask;
 14e:	90 81       	ld	r25, Z
 150:	98 27       	eor	r25, r24
 152:	09 c0       	rjmp	.+18     	; 0x166 <set_digital_output+0x98>
	else if (val)
 154:	66 23       	and	r22, r22
 156:	19 f0       	breq	.+6      	; 0x15e <set_digital_output+0x90>
		*(ioPin->portRegister) |= ioPin->bitmask;
 158:	90 81       	ld	r25, Z
 15a:	98 2b       	or	r25, r24
 15c:	04 c0       	rjmp	.+8      	; 0x166 <set_digital_output+0x98>
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
 15e:	20 81       	ld	r18, Z
 160:	98 2f       	mov	r25, r24
 162:	90 95       	com	r25
 164:	92 23       	and	r25, r18
 166:	90 83       	st	Z, r25
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
 168:	9c 91       	ld	r25, X
 16a:	98 2b       	or	r25, r24
 16c:	9c 93       	st	X, r25
 16e:	08 95       	ret

00000170 <red_led>:
// one LED (the red one), so green() will just drive I/O line PD7
// high or low, depending on the argument.
static inline void red_led(unsigned char on)
{
	#if defined (_ORANGUTAN_SVP)	// red LED turns on when driven low
	if (on == TOGGLE)
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	11 f4       	brne	.+4      	; 0x178 <red_led+0x8>
		set_digital_output(RED_LED, TOGGLE);
 174:	6f ef       	ldi	r22, 0xFF	; 255
 176:	05 c0       	rjmp	.+10     	; 0x182 <red_led+0x12>
	else if (on == LOW)
 178:	81 11       	cpse	r24, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <red_led+0x10>
		set_digital_output(RED_LED, HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	01 c0       	rjmp	.+2      	; 0x182 <red_led+0x12>
	else
		set_digital_output(RED_LED, LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0c 94 67 00 	jmp	0xce	; 0xce <set_digital_output>

00000188 <green_led>:
	#endif
}
	
static inline void green_led(unsigned char on)
{
	set_digital_output(GREEN_LED, on);
 188:	68 2f       	mov	r22, r24
 18a:	84 e1       	ldi	r24, 0x14	; 20
 18c:	0c 94 67 00 	jmp	0xce	; 0xce <set_digital_output>

00000190 <ToggleLEDIfButtonPressed>:
	}
}

// Here we can put common code that is done for both LEDs and just pass in the led function
void ToggleLEDIfButtonPressed(char pressed_state, unsigned long *ticks, void (*led_method)(unsigned char))
{
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	eb 01       	movw	r28, r22
 1a2:	8a 01       	movw	r16, r20
	// Check if button is pressed
	if(pressed_state)
 1a4:	88 23       	and	r24, r24
 1a6:	19 f1       	breq	.+70     	; 0x1ee <ToggleLEDIfButtonPressed+0x5e>
	{
		// See how long the button has been pressed
		unsigned long elapsed_time_ms = (ticks_to_microseconds(get_ticks() - *ticks)) / 1000;
 1a8:	0e 94 39 03 	call	0x672	; 0x672 <get_ticks>
 1ac:	c8 80       	ld	r12, Y
 1ae:	d9 80       	ldd	r13, Y+1	; 0x01
 1b0:	ea 80       	ldd	r14, Y+2	; 0x02
 1b2:	fb 80       	ldd	r15, Y+3	; 0x03
 1b4:	6c 19       	sub	r22, r12
 1b6:	7d 09       	sbc	r23, r13
 1b8:	8e 09       	sbc	r24, r14
 1ba:	9f 09       	sbc	r25, r15
 1bc:	0e 94 bd 02 	call	0x57a	; 0x57a <ticks_to_microseconds>
		if((elapsed_time_ms >= blink_ms) || (*ticks == 0))
 1c0:	60 39       	cpi	r22, 0x90	; 144
 1c2:	70 4d       	sbci	r23, 0xD0	; 208
 1c4:	83 40       	sbci	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	40 f4       	brcc	.+16     	; 0x1da <ToggleLEDIfButtonPressed+0x4a>
 1ca:	88 81       	ld	r24, Y
 1cc:	99 81       	ldd	r25, Y+1	; 0x01
 1ce:	aa 81       	ldd	r26, Y+2	; 0x02
 1d0:	bb 81       	ldd	r27, Y+3	; 0x03
 1d2:	89 2b       	or	r24, r25
 1d4:	8a 2b       	or	r24, r26
 1d6:	8b 2b       	or	r24, r27
 1d8:	89 f4       	brne	.+34     	; 0x1fc <ToggleLEDIfButtonPressed+0x6c>
		{
			// Time has elapsed, toggle LED and set new ticks.
			(*led_method)(TOGGLE);
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	f8 01       	movw	r30, r16
 1de:	09 95       	icall
			*ticks = get_ticks();
 1e0:	0e 94 39 03 	call	0x672	; 0x672 <get_ticks>
 1e4:	68 83       	st	Y, r22
 1e6:	79 83       	std	Y+1, r23	; 0x01
 1e8:	8a 83       	std	Y+2, r24	; 0x02
 1ea:	9b 83       	std	Y+3, r25	; 0x03
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <ToggleLEDIfButtonPressed+0x6c>
		}
	}
	else
	{
		// No button is pressed, reset LED and ticks
		(*led_method)(LOW);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	fa 01       	movw	r30, r20
 1f2:	09 95       	icall
		*ticks = 0;
 1f4:	18 82       	st	Y, r1
 1f6:	19 82       	std	Y+1, r1	; 0x01
 1f8:	1a 82       	std	Y+2, r1	; 0x02
 1fa:	1b 82       	std	Y+3, r1	; 0x03
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	08 95       	ret

0000020e <main>:
const long blink_ms = 250;

void ToggleLEDIfButtonPressed(char pressed_state, unsigned long *ticks, void (*led_method)(unsigned char));

int main()
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	28 97       	sbiw	r28, 0x08	; 8
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
	clear();
 222:	0e 94 4a 02 	call	0x494	; 0x494 <clear>
	
	// The amount of time the button has been held since the last LED toggle
	unsigned long ticks_top = 0;
 226:	1d 82       	std	Y+5, r1	; 0x05
 228:	1e 82       	std	Y+6, r1	; 0x06
 22a:	1f 82       	std	Y+7, r1	; 0x07
 22c:	18 86       	std	Y+8, r1	; 0x08
	unsigned long ticks_bottom = 0;
 22e:	19 82       	std	Y+1, r1	; 0x01
 230:	1a 82       	std	Y+2, r1	; 0x02
 232:	1b 82       	std	Y+3, r1	; 0x03
 234:	1c 82       	std	Y+4, r1	; 0x04

	while(1)
	{
		unsigned char pressed_state = button_is_pressed(ANY_BUTTON);
 236:	8c e2       	ldi	r24, 0x2C	; 44
 238:	0e 94 78 02 	call	0x4f0	; 0x4f0 <button_is_pressed>
 23c:	18 2f       	mov	r17, r24
		// The middle button will count as both the top and the bottom button (fun!)
		unsigned char pressed_state_top = pressed_state & (TOP_BUTTON | MIDDLE_BUTTON);
		unsigned char pressed_state_bottom = pressed_state & (BOTTOM_BUTTON | MIDDLE_BUTTON);

		// Deal with the top button and the green LED
		ToggleLEDIfButtonPressed(pressed_state_top, &ticks_top, green_led);
 23e:	44 ec       	ldi	r20, 0xC4	; 196
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	be 01       	movw	r22, r28
 244:	6b 5f       	subi	r22, 0xFB	; 251
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	88 72       	andi	r24, 0x28	; 40
 24a:	0e 94 c8 00 	call	0x190	; 0x190 <ToggleLEDIfButtonPressed>

		// Deal with the bottom button and the red LED
		ToggleLEDIfButtonPressed(pressed_state_bottom, &ticks_bottom, red_led);
 24e:	48 eb       	ldi	r20, 0xB8	; 184
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	be 01       	movw	r22, r28
 254:	6f 5f       	subi	r22, 0xFF	; 255
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	81 2f       	mov	r24, r17
 25a:	8c 70       	andi	r24, 0x0C	; 12
 25c:	0e 94 c8 00 	call	0x190	; 0x190 <ToggleLEDIfButtonPressed>
 260:	ea cf       	rjmp	.-44     	; 0x236 <main+0x28>

00000262 <delayMicroseconds.clone.0>:
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	6f 93       	push	r22
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	6a 95       	dec	r22
 26c:	f1 f7       	brne	.-4      	; 0x26a <delayMicroseconds.clone.0+0x8>
 26e:	6f 91       	pop	r22
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	c9 f7       	brne	.-14     	; 0x266 <delayMicroseconds.clone.0+0x4>
 274:	08 95       	ret

00000276 <_ZN12OrangutanLCD8busyWaitEv>:
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	17 b1       	in	r17, 0x07	; 7
 280:	3d 98       	cbi	0x07, 5	; 7
 282:	28 98       	cbi	0x05, 0	; 5
 284:	29 9a       	sbi	0x05, 1	; 5
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 28e:	2a 9a       	sbi	0x05, 2	; 5
 290:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 294:	06 b1       	in	r16, 0x06	; 6
 296:	2a 98       	cbi	0x05, 2	; 5
 298:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 29c:	2a 9a       	sbi	0x05, 2	; 5
 29e:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 2a2:	2a 98       	cbi	0x05, 2	; 5
 2a4:	24 96       	adiw	r28, 0x04	; 4
 2a6:	05 ff       	sbrs	r16, 5
 2a8:	10 c0       	rjmp	.+32     	; 0x2ca <_ZN12OrangutanLCD8busyWaitEv+0x54>
 2aa:	9e 01       	movw	r18, r28
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	80 91 06 01 	lds	r24, 0x0106
 2b4:	90 91 07 01 	lds	r25, 0x0107
 2b8:	a0 91 08 01 	lds	r26, 0x0108
 2bc:	b0 91 09 01 	lds	r27, 0x0109
 2c0:	28 17       	cp	r18, r24
 2c2:	39 07       	cpc	r19, r25
 2c4:	4a 07       	cpc	r20, r26
 2c6:	5b 07       	cpc	r21, r27
 2c8:	00 f3       	brcs	.-64     	; 0x28a <_ZN12OrangutanLCD8busyWaitEv+0x14>
 2ca:	9e 01       	movw	r18, r28
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	80 91 06 01 	lds	r24, 0x0106
 2d4:	90 91 07 01 	lds	r25, 0x0107
 2d8:	a0 91 08 01 	lds	r26, 0x0108
 2dc:	b0 91 09 01 	lds	r27, 0x0109
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	4a 07       	cpc	r20, r26
 2e6:	5b 07       	cpc	r21, r27
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <_ZN12OrangutanLCD8busyWaitEv+0x7e>
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	a0 e0       	ldi	r26, 0x00	; 0
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <_ZN12OrangutanLCD8busyWaitEv+0x86>
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	95 e7       	ldi	r25, 0x75	; 117
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	80 93 06 01 	sts	0x0106, r24
 300:	90 93 07 01 	sts	0x0107, r25
 304:	a0 93 08 01 	sts	0x0108, r26
 308:	b0 93 09 01 	sts	0x0109, r27
 30c:	17 b9       	out	0x07, r17	; 7
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <_ZN12OrangutanLCD8sendDataEh>:
 318:	28 b1       	in	r18, 0x08	; 8
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	90 70       	andi	r25, 0x00	; 0
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	23 7c       	andi	r18, 0xC3	; 195
 32a:	28 2b       	or	r18, r24
 32c:	28 b9       	out	0x08, r18	; 8
 32e:	2a 9a       	sbi	0x05, 2	; 5
 330:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 334:	2a 98       	cbi	0x05, 2	; 5
 336:	0e 94 31 01 	call	0x262	; 0x262 <delayMicroseconds.clone.0>
 33a:	08 95       	ret

0000033c <_ZN12OrangutanLCD4sendEhhh>:
 33c:	a2 e0       	ldi	r26, 0x02	; 2
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e4 ea       	ldi	r30, 0xA4	; 164
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__prologue_saves__+0x1a>
 348:	18 2f       	mov	r17, r24
 34a:	4a 83       	std	Y+2, r20	; 0x02
 34c:	69 83       	std	Y+1, r22	; 0x01
 34e:	0e 94 14 02 	call	0x428	; 0x428 <_ZN12OrangutanLCD4initEv>
 352:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN12OrangutanLCD8busyWaitEv>
 356:	f7 b0       	in	r15, 0x07	; 7
 358:	08 b1       	in	r16, 0x08	; 8
 35a:	29 98       	cbi	0x05, 1	; 5
 35c:	69 81       	ldd	r22, Y+1	; 0x01
 35e:	4a 81       	ldd	r20, Y+2	; 0x02
 360:	66 23       	and	r22, r22
 362:	11 f0       	breq	.+4      	; 0x368 <_ZN12OrangutanLCD4sendEhhh+0x2c>
 364:	28 9a       	sbi	0x05, 0	; 5
 366:	01 c0       	rjmp	.+2      	; 0x36a <_ZN12OrangutanLCD4sendEhhh+0x2e>
 368:	28 98       	cbi	0x05, 0	; 5
 36a:	87 b1       	in	r24, 0x07	; 7
 36c:	8c 63       	ori	r24, 0x3C	; 60
 36e:	87 b9       	out	0x07, r24	; 7
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	29 f0       	breq	.+10     	; 0x37e <_ZN12OrangutanLCD4sendEhhh+0x42>
 374:	81 2f       	mov	r24, r17
 376:	82 95       	swap	r24
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN12OrangutanLCD8sendDataEh>
 37e:	81 2f       	mov	r24, r17
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN12OrangutanLCD8sendDataEh>
 386:	f7 b8       	out	0x07, r15	; 7
 388:	08 b9       	out	0x08, r16	; 8
 38a:	22 96       	adiw	r28, 0x02	; 2
 38c:	e5 e0       	ldi	r30, 0x05	; 5
 38e:	0c 94 87 03 	jmp	0x70e	; 0x70e <__epilogue_restores__+0x1a>

00000392 <_ZN12OrangutanLCD8send_cmdEh>:
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	42 e0       	ldi	r20, 0x02	; 2
 396:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN12OrangutanLCD4sendEhhh>
 39a:	08 95       	ret

0000039c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN12OrangutanLCD4sendEhhh>
 3a4:	08 95       	ret

000003a6 <_ZN12OrangutanLCD5init2Ev>:
 3a6:	3d 98       	cbi	0x07, 5	; 7
 3a8:	45 9a       	sbi	0x08, 5	; 8
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	95 e7       	ldi	r25, 0x75	; 117
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	80 93 06 01 	sts	0x0106, r24
 3b6:	90 93 07 01 	sts	0x0107, r25
 3ba:	a0 93 08 01 	sts	0x0108, r26
 3be:	b0 93 09 01 	sts	0x0109, r27
 3c2:	20 9a       	sbi	0x04, 0	; 4
 3c4:	21 9a       	sbi	0x04, 1	; 4
 3c6:	22 9a       	sbi	0x04, 2	; 4
 3c8:	8e e1       	ldi	r24, 0x1E	; 30
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay_ms>
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay_ms>
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay_ms>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay_ms>
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN12OrangutanLCD13send_4bit_cmdEh>
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delay_ms>
 408:	88 e2       	ldi	r24, 0x28	; 40
 40a:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 426:	08 95       	ret

00000428 <_ZN12OrangutanLCD4initEv>:
 428:	80 91 0a 01 	lds	r24, 0x010A
 42c:	88 23       	and	r24, r24
 42e:	29 f4       	brne	.+10     	; 0x43a <_ZN12OrangutanLCD4initEv+0x12>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 0a 01 	sts	0x010A, r24
 436:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN12OrangutanLCD5init2Ev>
 43a:	08 95       	ret

0000043c <_ZN12OrangutanLCD5clearEv>:
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN12OrangutanLCD8send_cmdEh>
 442:	80 91 02 01 	lds	r24, 0x0102
 446:	90 91 03 01 	lds	r25, 0x0103
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	11 f1       	breq	.+68     	; 0x492 <_ZN12OrangutanLCD5clearEv+0x56>
 44e:	a0 e0       	ldi	r26, 0x00	; 0
 450:	b0 e2       	ldi	r27, 0x20	; 32
 452:	08 c0       	rjmp	.+16     	; 0x464 <_ZN12OrangutanLCD5clearEv+0x28>
 454:	e0 91 02 01 	lds	r30, 0x0102
 458:	f0 91 03 01 	lds	r31, 0x0103
 45c:	e2 0f       	add	r30, r18
 45e:	f3 1f       	adc	r31, r19
 460:	b0 83       	st	Z, r27
 462:	af 5f       	subi	r26, 0xFF	; 255
 464:	2a 2f       	mov	r18, r26
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	80 91 00 01 	lds	r24, 0x0100
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	60 91 01 01 	lds	r22, 0x0101
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	86 9f       	mul	r24, r22
 478:	a0 01       	movw	r20, r0
 47a:	87 9f       	mul	r24, r23
 47c:	50 0d       	add	r21, r0
 47e:	96 9f       	mul	r25, r22
 480:	50 0d       	add	r21, r0
 482:	11 24       	eor	r1, r1
 484:	24 17       	cp	r18, r20
 486:	35 07       	cpc	r19, r21
 488:	2c f3       	brlt	.-54     	; 0x454 <_ZN12OrangutanLCD5clearEv+0x18>
 48a:	10 92 05 01 	sts	0x0105, r1
 48e:	10 92 04 01 	sts	0x0104, r1
 492:	08 95       	ret

00000494 <clear>:
 494:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN12OrangutanLCD5clearEv>
 498:	08 95       	ret

0000049a <_ZN20OrangutanPushbuttons5init2Ev>:
 49a:	87 b1       	in	r24, 0x07	; 7
 49c:	83 7d       	andi	r24, 0xD3	; 211
 49e:	87 b9       	out	0x07, r24	; 7
 4a0:	88 b1       	in	r24, 0x08	; 8
 4a2:	8c 62       	ori	r24, 0x2C	; 44
 4a4:	88 b9       	out	0x08, r24	; 8
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	6f 93       	push	r22
 4ac:	64 e0       	ldi	r22, 0x04	; 4
 4ae:	6a 95       	dec	r22
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <_ZN20OrangutanPushbuttons5init2Ev+0x14>
 4b2:	6f 91       	pop	r22
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	c9 f7       	brne	.-14     	; 0x4aa <_ZN20OrangutanPushbuttons5init2Ev+0x10>
 4b8:	08 95       	ret

000004ba <_ZN20OrangutanPushbuttons4initEv>:
 4ba:	80 91 0b 01 	lds	r24, 0x010B
 4be:	88 23       	and	r24, r24
 4c0:	29 f4       	brne	.+10     	; 0x4cc <_ZN20OrangutanPushbuttons4initEv+0x12>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	80 93 0b 01 	sts	0x010B, r24
 4c8:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN20OrangutanPushbuttons5init2Ev>
 4cc:	08 95       	ret

000004ce <_ZN20OrangutanPushbuttons9isPressedEh>:
 4ce:	a1 e0       	ldi	r26, 0x01	; 1
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ed e6       	ldi	r30, 0x6D	; 109
 4d4:	f2 e0       	ldi	r31, 0x02	; 2
 4d6:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__prologue_saves__+0x20>
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20OrangutanPushbuttons4initEv>
 4e0:	96 b1       	in	r25, 0x06	; 6
 4e2:	90 95       	com	r25
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	89 23       	and	r24, r25
 4e8:	21 96       	adiw	r28, 0x01	; 1
 4ea:	e2 e0       	ldi	r30, 0x02	; 2
 4ec:	0c 94 8a 03 	jmp	0x714	; 0x714 <__epilogue_restores__+0x20>

000004f0 <button_is_pressed>:
 4f0:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN20OrangutanPushbuttons9isPressedEh>
 4f4:	08 95       	ret

000004f6 <_ZN13OrangutanTime17delayMicrosecondsEj>:
 4f6:	6f 93       	push	r22
 4f8:	64 e0       	ldi	r22, 0x04	; 4
 4fa:	6a 95       	dec	r22
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
 4fe:	6f 91       	pop	r22
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	c9 f7       	brne	.-14     	; 0x4f6 <_ZN13OrangutanTime17delayMicrosecondsEj>
 504:	08 95       	ret

00000506 <__vector_11>:
 506:	2f 92       	push	r2
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	2f b6       	in	r2, 0x3f	; 63
 50e:	80 91 19 01 	lds	r24, 0x0119
 512:	90 91 1a 01 	lds	r25, 0x011A
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	80 93 19 01 	sts	0x0119, r24
 51c:	90 93 1a 01 	sts	0x011A, r25
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	80 91 1b 01 	lds	r24, 0x011B
 526:	89 1f       	adc	r24, r25
 528:	80 93 1b 01 	sts	0x011B, r24
 52c:	90 91 21 01 	lds	r25, 0x0121
 530:	9c 5f       	subi	r25, 0xFC	; 252
 532:	90 93 21 01 	sts	0x0121, r25
 536:	80 91 20 01 	lds	r24, 0x0120
 53a:	80 51       	subi	r24, 0x10	; 16
 53c:	97 42       	sbci	r25, 0x27	; 39
 53e:	c0 f0       	brcs	.+48     	; 0x570 <end>
 540:	90 93 21 01 	sts	0x0121, r25
 544:	80 93 20 01 	sts	0x0120, r24
 548:	80 91 1c 01 	lds	r24, 0x011C
 54c:	90 91 1d 01 	lds	r25, 0x011D
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	80 93 1c 01 	sts	0x011C, r24
 556:	90 93 1d 01 	sts	0x011D, r25
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	80 91 1e 01 	lds	r24, 0x011E
 560:	89 1f       	adc	r24, r25
 562:	80 93 1e 01 	sts	0x011E, r24
 566:	80 91 1f 01 	lds	r24, 0x011F
 56a:	89 1f       	adc	r24, r25
 56c:	80 93 1f 01 	sts	0x011F, r24

00000570 <end>:
 570:	2f be       	out	0x3f, r2	; 63
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	2f 90       	pop	r2
 578:	18 95       	reti

0000057a <ticks_to_microseconds>:
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	25 e0       	ldi	r18, 0x05	; 5
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodsi4>
 59a:	b9 01       	movw	r22, r18
 59c:	ca 01       	movw	r24, r20
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <_ZN13OrangutanTime17delayMillisecondsEj>:
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
 5ac:	88 ee       	ldi	r24, 0xE8	; 232
 5ae:	93 e0       	ldi	r25, 0x03	; 3
 5b0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN13OrangutanTime17delayMicrosecondsEj>
 5b4:	21 97       	sbiw	r28, 0x01	; 1
 5b6:	20 97       	sbiw	r28, 0x00	; 0
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <delay_ms>:
 5c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN13OrangutanTime17delayMillisecondsEj>
 5c4:	08 95       	ret

000005c6 <_ZN13OrangutanTime5init2Ev>:
 5c6:	e0 e7       	ldi	r30, 0x70	; 112
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	8e 7f       	andi	r24, 0xFE	; 254
 5ce:	80 83       	st	Z, r24
 5d0:	a0 eb       	ldi	r26, 0xB0	; 176
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	8c 91       	ld	r24, X
 5d6:	83 60       	ori	r24, 0x03	; 3
 5d8:	8c 93       	st	X, r24
 5da:	a1 eb       	ldi	r26, 0xB1	; 177
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	8c 91       	ld	r24, X
 5e0:	80 7f       	andi	r24, 0xF0	; 240
 5e2:	8c 93       	st	X, r24
 5e4:	8c 91       	ld	r24, X
 5e6:	82 60       	ori	r24, 0x02	; 2
 5e8:	8c 93       	st	X, r24
 5ea:	b8 9a       	sbi	0x17, 0	; 23
 5ec:	80 81       	ld	r24, Z
 5ee:	81 60       	ori	r24, 0x01	; 1
 5f0:	80 83       	st	Z, r24
 5f2:	78 94       	sei
 5f4:	08 95       	ret

000005f6 <_ZN13OrangutanTime4initEv>:
 5f6:	80 91 22 01 	lds	r24, 0x0122
 5fa:	88 23       	and	r24, r24
 5fc:	29 f4       	brne	.+10     	; 0x608 <_ZN13OrangutanTime4initEv+0x12>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 22 01 	sts	0x0122, r24
 604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN13OrangutanTime5init2Ev>
 608:	08 95       	ret

0000060a <_ZN13OrangutanTime5ticksEv>:
 60a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN13OrangutanTime4initEv>
 60e:	80 91 70 00 	lds	r24, 0x0070
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	80 93 70 00 	sts	0x0070, r24
 618:	20 91 b2 00 	lds	r18, 0x00B2
 61c:	80 91 18 01 	lds	r24, 0x0118
 620:	90 91 19 01 	lds	r25, 0x0119
 624:	a0 91 1a 01 	lds	r26, 0x011A
 628:	b0 91 1b 01 	lds	r27, 0x011B
 62c:	b8 99       	sbic	0x17, 0	; 23
 62e:	04 c0       	rjmp	.+8      	; 0x638 <_ZN13OrangutanTime5ticksEv+0x2e>
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	11 c0       	rjmp	.+34     	; 0x65a <_ZN13OrangutanTime5ticksEv+0x50>
 638:	80 91 b2 00 	lds	r24, 0x00B2
 63c:	20 91 18 01 	lds	r18, 0x0118
 640:	30 91 19 01 	lds	r19, 0x0119
 644:	40 91 1a 01 	lds	r20, 0x011A
 648:	50 91 1b 01 	lds	r21, 0x011B
 64c:	20 50       	subi	r18, 0x00	; 0
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	4f 4f       	sbci	r20, 0xFF	; 255
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	a0 e0       	ldi	r26, 0x00	; 0
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	28 2b       	or	r18, r24
 65c:	39 2b       	or	r19, r25
 65e:	4a 2b       	or	r20, r26
 660:	5b 2b       	or	r21, r27
 662:	80 91 70 00 	lds	r24, 0x0070
 666:	81 60       	ori	r24, 0x01	; 1
 668:	80 93 70 00 	sts	0x0070, r24
 66c:	b9 01       	movw	r22, r18
 66e:	ca 01       	movw	r24, r20
 670:	08 95       	ret

00000672 <get_ticks>:
 672:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN13OrangutanTime5ticksEv>
 676:	08 95       	ret

00000678 <__udivmodsi4>:
 678:	a1 e2       	ldi	r26, 0x21	; 33
 67a:	1a 2e       	mov	r1, r26
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	fd 01       	movw	r30, r26
 682:	0d c0       	rjmp	.+26     	; 0x69e <__udivmodsi4_ep>

00000684 <__udivmodsi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	ee 1f       	adc	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	a2 17       	cp	r26, r18
 68e:	b3 07       	cpc	r27, r19
 690:	e4 07       	cpc	r30, r20
 692:	f5 07       	cpc	r31, r21
 694:	20 f0       	brcs	.+8      	; 0x69e <__udivmodsi4_ep>
 696:	a2 1b       	sub	r26, r18
 698:	b3 0b       	sbc	r27, r19
 69a:	e4 0b       	sbc	r30, r20
 69c:	f5 0b       	sbc	r31, r21

0000069e <__udivmodsi4_ep>:
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a 94       	dec	r1
 6a8:	69 f7       	brne	.-38     	; 0x684 <__udivmodsi4_loop>
 6aa:	60 95       	com	r22
 6ac:	70 95       	com	r23
 6ae:	80 95       	com	r24
 6b0:	90 95       	com	r25
 6b2:	9b 01       	movw	r18, r22
 6b4:	ac 01       	movw	r20, r24
 6b6:	bd 01       	movw	r22, r26
 6b8:	cf 01       	movw	r24, r30
 6ba:	08 95       	ret

000006bc <__prologue_saves__>:
 6bc:	2f 92       	push	r2
 6be:	3f 92       	push	r3
 6c0:	4f 92       	push	r4
 6c2:	5f 92       	push	r5
 6c4:	6f 92       	push	r6
 6c6:	7f 92       	push	r7
 6c8:	8f 92       	push	r8
 6ca:	9f 92       	push	r9
 6cc:	af 92       	push	r10
 6ce:	bf 92       	push	r11
 6d0:	cf 92       	push	r12
 6d2:	df 92       	push	r13
 6d4:	ef 92       	push	r14
 6d6:	ff 92       	push	r15
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	ca 1b       	sub	r28, r26
 6e6:	db 0b       	sbc	r29, r27
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	09 94       	ijmp

000006f4 <__epilogue_restores__>:
 6f4:	2a 88       	ldd	r2, Y+18	; 0x12
 6f6:	39 88       	ldd	r3, Y+17	; 0x11
 6f8:	48 88       	ldd	r4, Y+16	; 0x10
 6fa:	5f 84       	ldd	r5, Y+15	; 0x0f
 6fc:	6e 84       	ldd	r6, Y+14	; 0x0e
 6fe:	7d 84       	ldd	r7, Y+13	; 0x0d
 700:	8c 84       	ldd	r8, Y+12	; 0x0c
 702:	9b 84       	ldd	r9, Y+11	; 0x0b
 704:	aa 84       	ldd	r10, Y+10	; 0x0a
 706:	b9 84       	ldd	r11, Y+9	; 0x09
 708:	c8 84       	ldd	r12, Y+8	; 0x08
 70a:	df 80       	ldd	r13, Y+7	; 0x07
 70c:	ee 80       	ldd	r14, Y+6	; 0x06
 70e:	fd 80       	ldd	r15, Y+5	; 0x05
 710:	0c 81       	ldd	r16, Y+4	; 0x04
 712:	1b 81       	ldd	r17, Y+3	; 0x03
 714:	aa 81       	ldd	r26, Y+2	; 0x02
 716:	b9 81       	ldd	r27, Y+1	; 0x01
 718:	ce 0f       	add	r28, r30
 71a:	d1 1d       	adc	r29, r1
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	ed 01       	movw	r28, r26
 728:	08 95       	ret

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
